#!/usr/bin/env bash
#
# This script is designed to simplify the common task of setting build
# information for Go applications using information provided by a Git
# repository.
#
# Homepage: https://github.com/codekoala/go-build-info
#

package="main"
prefix="Build"
outfile=""

declare -A varnames
varnames=(
  ["branch"]="Branch"
  ["revision"]="Revision"
  ["user"]="User"
  ["date"]="Date"
)

# make sure we have access to a newer version of getopt
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
  echo "getopt --test failed..."
  exit 1
fi

# set options
SHORT=p:o:f:b:r:u:d:
LONG=package:,output:,prefix:,branch:,revision:,user:,date:
parsed=$(getopt --options $SHORT --longoptions $LONG --name "${0}" -- "${@}")
if [[ $? -ne 0 ]]; then
  exit 2
fi

eval set -- "${parsed}"

while true; do
  case "${1}" in
    -p|--package)
      package="${2}"
      shift 2
      ;;
    -o|--output)
      outfile="${2}"
      shift 2
      ;;
    -f|--prefix)
      prefix="${2}"
      shift 2
      ;;
    -b|--branch)
      varnames["branch"]="${2}"
      shift 2
      ;;
    -r|--revision)
      varnames["revision"]="${2}"
      shift 2
      ;;
    -u|--user)
      varnames["user"]="${2}"
      shift 2
      ;;
    -d|--date)
      varnames["date"]="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unexpected option ${opt}"
      exit 1
      ;;
  esac
done

build_branch=$(git rev-parse --abbrev-ref HEAD)
build_revision=$(git rev-parse HEAD)
build_changed_files=$(git status --porcelain | wc -l)
build_user=$(whoami)
build_date=$(date -Iseconds)

if [[ ${build_changed_files} -gt 0 ]]; then
  build_revision="${build_revision}(CHANGES)"
fi

gocode=$(cat <<EOT
// DO NOT EDIT! This file is generated by $(basename ${0}). Any manual changes will be overwritten.
package ${package}

var (
	${prefix}${varnames["branch"]}   = "${build_branch}"
	${prefix}${varnames["revision"]} = "${build_revision}"
	${prefix}${varnames["user"]}     = "${build_user}"
	${prefix}${varnames["date"]}     = "${build_date}"
)
EOT
)

if [[ "${outfile}" != "" ]]; then
  echo "${gocode}" > "${outfile}"
else
  echo "${gocode}"
fi

# vim:et ts=2 sw=2 ai:
